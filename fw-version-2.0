#pragma once
#include <iostream>
#include <stdexcept>
#include <string>
#include <string_view>


// Assertion macro to be used by client code.
#define ENSURE(cond, reason) ::test::detail::ensure(  \
    (cond), (#cond), (reason), (__PRETTY_FUNCTION__),   \
    (__FILE__), (__LINE__))



namespace test::detail
{
// This class is used statically for convenience
struct Test_Driver
{
    static inline auto tests_passed = 0ULL;
    static inline auto tests_failed = 0ULL;

    void pass(const char* condition) const noexcept
    {
        tests_passed++;
        std::cout << "test passed: " << condition  << "\n";
    }

    void fail(
        const char* cond_str,
        const char* reason,
        const char* func,
        const char* file,
        int         line
    )const noexcept
    {
        tests_failed++;

        using namespace std::string_literals;
        std::cout
            << "test failed for condition:\n"
            << "`" << cond_str << "`\n"
            << "reason: \"" << reason << "\"\n"
            << "in: `" << func << "`\n"
            << "at " << file << ":" << std::to_string(line) << "\n"
        ;
    }

    ~Test_Driver()
    {
        std::cout
            << "\nEnd of tests\n"
            << "  passed: " << tests_passed << "\n"
            << "  failed: " << tests_failed << "\n";
        tests_passed = 0;
        tests_failed = 0;
    }
};


// Macro ENSURE expands to this
void ensure(bool condition, const char* cond_str,
    const char* reason, const char* func, const char* file, int line)
{
    static Test_Driver td;

    if (condition)
        td.pass(reason);
    else
        td.fail(cond_str, reason, func, file, line);
}


} // namespace test::detail
